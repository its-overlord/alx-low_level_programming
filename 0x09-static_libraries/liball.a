!<arch>
0-isupper.c/    0           0     0     644     208       `
#include "main.h"

/**
 * _isupper - checks for uppercase
 * @c: the character
 * Return: 1 if c is uppercase
 * otherwise 0
 */
int _isupper(int c)
{
	if (c >= 'A' && c <=  'Z')
		return (1);
	return (0);
}
0-memset.c/     0           0     0     644     387       `
#include "main.h"

/**
 * _memset - fills memory with constant byte
 * @s: pointer to the starting address of the memory to be filled
 * @b: the value to be set
 * @n: the number of byte to be filled starting from s
 * Return: a pointer to the memory area s
 */
char *_memset(char *s, char b, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
	{
		s[i] = b;
	}
	return (s);
}

0-strcat.c/     0           0     0     644     472       `
#include "main.h"

/**
 * _strcat - concaatenates two strings
 * @dest: destination string
 * (to which the source string will be appended)
 * @src: source string
 * (which will be appended to the destination string)
 * Return: destination string
 */
char *_strcat(char *dest, char *src)
{
	int cnt = 0;
	int num = 0;

	while (dest[cnt] != '\0')
	{
		cnt++;
	}
	while (src[num] != '\0')
	{
		dest[cnt] = src[num];
		num++;
		cnt++;
	}
	dest[cnt] = '\0';
	return (dest);
}
100-atoi.c/     0           0     0     644     594       `
#include "main.h"

/**
 * _atoi - converts a string to an integer
 * @s: string to be converted
 *
 * Return: the int converted from the string
 */
int _atoi(char *s)
{
	int i, d, n, len, f, digit;

	i = 0;
	d = 0;
	n = 0;
	len = 0;
	f = 0;
	digit = 0;

	while (s[len] != '\0')
		len++;

	while (i < len && f == 0)
	{
		if (s[i] == '-')
			++d;

		if (s[i] >= '0' && s[i] <= '9')
		{
			digit = s[i] - '0';
			if (d % 2)
				digit = -digit;
			n = n * 10 + digit;
			f = 1;
			if (s[i + 1] < '0' || s[i + 1] > '9')
				break;
			f = 0;
		}
		i++;
	}

	if (f == 0)
		return (0);

	return (n);
}
1-isdigit.c/    0           0     0     644     196       `
#include "main.h"

/**
 * _isdigit - checks for digit
 * @c: the digit
 * Return: 1 if c is digit
 * otherwise 0
 */
int _isdigit(int c)
{
	if (c >= '0' && c <=  '9')
		return (1);
	return (0);
}
1-memcpy.c/     0           0     0     644     372       `
#include "main.h"

/**
 * _memcpy - copies memory area
 * @dest: pointer to destination memory area
 * @src: pointer to source memory area
 * @n: the number of bytes to be copied from src to dest
 * Return: destination string
 */
char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
	{
		dest[i] = src[i];
	}
	return (dest);
}
1-strncat.c/    0           0     0     644     532       `
#include "main.h"

/**
 * _strncat - concatenates two strings
 * @dest: destination string
 * (to which the source string will be appended)
 * @src: source string
 * (which will be appended to the destination string)
 * @n: the number of byte to concatenate
 * Return: destination string
 */
char *_strncat(char *dest, char *src, int n)
{
	int cnt = 0;
	int num = 0;

	while (dest[cnt] != '\0')
	{
		cnt++;
	}
	while (src[num] != '\0' && num < n)
	{
		dest[cnt] = src[num];
		num++;
		cnt++;
	}
	dest[cnt] = '\0';
	return (dest);
}
2-strchr.c/     0           0     0     644     332       `
#include "main.h"

/**
 * _strchr - locates a charater in a string
 * @s: pointer to the string
 * @c: the character to locate
 * Return:  first occurrence of c
 */
char *_strchr(char *s, char c)
{
		int a;

		while (1)
		{
			a = *s++;
			if (a == c)
			{
				return (s - 1);
			}
			if (a == 0)
			{
				return (NULL);
			}
		}
}
2-strlen.c/     0           0     0     644     235       `
#include "main.h"

/**
 * _strlen - return the lenght of a string
 * @s: the string
 * Return: the lenght of the string
 */
int _strlen(char *s)
{
	int count;

	count = 0;

	while (s[count] != '\0')
	{
		count++;
	}
	return (count);
}

2-strncpy.c/    0           0     0     644     483       `
#include "main.h"

/**
 * _strncpy - copies two strings
 * @dest: destination string
 * (to which the source string will be copied)
 * @src: source string
 * (which will be copied to the destination string)
 * @n: the number of byte to copy
 * Return: destination string
 */
char *_strncpy(char *dest, char *src, int n)
{
	int num = 0;

	while (src[num] != '\0' && num < n)
	{
		dest[num] = src[num];
		num++;
	}
	while (num < n)
	{
		dest[num] = '\0';
		num++;
	}
	return (dest);
}

3-islower.c/    0           0     0     644     222       `
#include "main.h"

/**
 * _islower - checks for lowercase character
 * @c: character to check
 * Return: 1 if lowercase and 0 if not
 */
int _islower(int c)
{
	if (c >= 'a' && c <= 'z')
		return (1);
	else
		return (0);
}
3-puts.c/       0           0     0     644     206       `
#include "main.h"

/**
 * _puts - prints string, followed by new line
 * @str: the string
 */
void _puts(char *str)
{
	int i;

	for (i = 0; str[i] != '\0'; i++)
	{
		_putchar(str[i]);
	}
	_putchar('\n');
}
3-strcmp.c/     0           0     0     644     439       `
#include "main.h"

/**
 * _strcmp - compares two strings
 * @s1: Pointer to the first string to be compared
 * @s2: Pointer to the second string to be compared
 * Return: 0 if both are the same
 * positive int if s1 is lexicographically greater s2
 * negative int if s2 is lexicographically greater s1
 */
int _strcmp(char *s1, char *s2)
{
	while (*s1 == *s2)
	{
		if (*s1 == '\0')
			return (0);
		s1++;
		s2++;
	}
	return (*s1 - *s2);
}

3-strspn.c/     0           0     0     644     577       `
#include "main.h"

/**
 **_strspn - gets the length of a prefix substring
  * @s: string to evaluate
  * @accept: string containing the list of characters to match in s
  *
  * Return: the number of bytes in the initial segment
  * of s which consist only of bytes from accept
  */
unsigned int _strspn(char *s, char *accept)
{
	int i, j, count, flag;

	count = 0;

	for (i = 0; s[i] != '\0'; i++)
	{
		flag = 0;

		for (j = 0; accept[j] != '\0'; j++)
		{
			if (s[i] == accept[j])
			{
				count++;
				flag = 1;
			}
		}
		if (flag == 0)
			return (count);
	}
	return (0);
}

4-isalpha.c/    0           0     0     644     274       `
#include "main.h"

/**
 * _isalpha - checks for alphabetic character
 * @c: character to be checked
 * Return: 1 if lowercase and 0 if not
 */
int _isalpha(int c)
{
	if (c >= 'a' && c <= 'z')
		return (1);
	else if (c >= 'A' && c <= 'Z')
		return (1);
	else
		return (0);
}
4-strpbrk.c/    0           0     0     644     500       `
#include "main.h"

/**
 * *_strpbrk - searches a string for any of a set of bytes
 * @s: pointer to string to be sesrched
 * @accept: pointer to string that defines
 * the set of characters you're interested in
 * Return: a pointer to the first occurrence of any
 * character from the accept set within the s
 */
char *_strpbrk(char *s, char *accept)
{
	int j;

	while  (*s != '\0')
	{
		for (j = 0; accept[j] != '\0'; j++)
		{
			if (*s == accept[j])
				return (s);
		}
		s++;
	}
	return (NULL);
}
5-strstr.c/     0           0     0     644     578       `
#include "main.h"

/**
 * *_strstr - searches a string for any of a set of bytes
 * @haystack: pointer to string to be sesrched
 * @needle: pointer to the string that
 * represents the substring you're looking for
 * Return: a pointer to the first occurrence of any
 * character from the needle set within haystack
 */
char *_strstr(char *haystack, char *needle)
{
	int i, j;

	for (i = 0; haystack[i] != '\0'; i++)
	{
		for (j = 0; needle[j] != '\0'; j++)
		{
			if (haystack[i + j] != needle[j])
				break;
		}
		if (!needle[j])
			return (&haystack[i]);
	}
	return (NULL);
}
6-abs.c/        0           0     0     644     206       `
#include "main.h"

/**
 * _abs - computes the absoulte value of a numbe r
 * @n: number
 * Return: the absolute value of the number
 */
int _abs(int n)
{
	if (n < 0)
		n = -n;
	else
		n = n;
	return (n);
}
9-strcpy.c/     0           0     0     644     404       `
#include "main.h"

/**
 * *_strcpy - copys the content of the source string to
 * the destination string
 * @src: the source string
 * @dest: the destination string
 * Return: the destination string
 */
char *_strcpy(char *dest, char *src)
{
	int count = 0;
	int i = 0;

	while (src[count] != '\0')
	{
		count++;
	}
	while (i < count)
	{
		dest[i] = src[i];
		i++;
	}
	dest[i] = '\0';

	return (dest);
}
main.c/         0           0     0     644     148       `
#include "main.h"

int main(void)
{
    _puts("\"At the end of the day, my goal was to be the best hacker\"\n\t- Kevin Mitnick");
    return (0);
}
_putchar.c/     0           0     0     644     247       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

